use anyhow::{Context, Result};
use clap::Parser;
use rspotify::{
    model::{Market, SearchResult, SearchType},
    prelude::*,
    scopes, AuthCodeSpotify, Credentials, OAuth,
};

#[derive(Parser)]
#[command(version, about, long_about=None)]
struct Args {
    artist: String,

    #[arg(short = 'n', long = "name", help = "Name of the playlist.")]
    playlist_name: Option<String>,

    #[arg(
        short,
        long,
        help = "Sort the tracks in descending order by release date, instead of ascending order."
    )]
    descending: bool,
}

#[tokio::main]
async fn main() {
    let args = Args::parse();
    println!("artist: {:?}", args.artist);

    // check if we already have the user's credentials stored.
    let creds = Credentials::from_env()
        .context("Failed to get credentials from environment.")
        .unwrap();
    let oath = OAuth::from_env(scopes!("playlist-modify-public")).unwrap();

    let spotify = AuthCodeSpotify::new(creds, oath);

    let url = spotify.get_authorize_url(false).unwrap();

    spotify
        .prompt_for_token(&url)
        .await
        .unwrap_or_else(|err| panic!("Failed to get token: {:?}", err));

    // search for artist ID using inputted artist name

    let market = Market::FromToken;
    let limit = 50;
    let offset = 0;
    let search_result = spotify
        .search(
            &args.artist,
            SearchType::Artist,
            Some(market),
            None,
            Some(limit),
            Some(offset),
        )
        .await
        .unwrap_or_else(|err| panic!("Failed to search for artist: {:?}", err));

    let artists = match search_result {
        SearchResult::Artists(artists_page) => artists_page.items,
        _ => panic!(
            "Expected artists in search result, instead got: {:?}",
            search_result
        ),
    };

    for artist in artists {
        println!("{:?}", artist);
    }

    // create a new playlist

    let user_id = spotify.current_user().await.unwrap().id;

    let playlist_name = args
        .playlist_name
        .unwrap_or(format!("{} Discography", args.artist));

    let playlist_description = format!(
        "The entire discrography of {}. Auto-generated by AllTracks: https://github.com/bradwj/alltracks",
        args.artist
    );

    let playlist = spotify
        .user_playlist_create(
            user_id,
            &playlist_name,
            Some(true),
            Some(false),
            Some(&playlist_description),
        )
        .await
        .unwrap_or_else(|err| panic!("Failed to create playlist: {:?}", err));

    println!("done");
}
